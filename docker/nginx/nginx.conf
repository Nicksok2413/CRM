# ==============================================================================
# Главная конфигурация Nginx для CRM-приложения.
# ==============================================================================

# Указываем Nginx автоматически определить количество рабочих процессов.
worker_processes auto;
# Путь к файлу с ID главного процесса.
pid /var/run/nginx.pid;

# Настройки обработки соединений.
events {
    worker_connections 1024;
}

# Основной блок конфигурации для HTTP-трафика.
http {
    # Подключаем стандартный файл с MIME-типами.
    include       /etc/nginx/mime.types;
    # Тип по умолчанию для файлов, чей MIME-тип не определен.
    default_type  application/octet-stream;

    # Настройки логов.
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

    # Определяем "upstream" — группу наших бэкенд-серверов.
    upstream crm_backend {
        # `django:8000` — это имя сервиса и порт из docker-compose.yml.
        server django:8000;
    }

    # Определяем зону для ограничения частоты запросов.
    # `limit_req_zone`:
    #   - `$binary_remote_addr`: ключ — IP-адрес клиента.
    #   - `zone=default_limit:10m`: имя зоны `default_limit`, размер 10 МБ для хранения IP.
    #   - `rate=15r/s`: разрешенная средняя скорость — 15 запросов в секунду.
    limit_req_zone $binary_remote_addr zone=default_limit:10m rate=15r/s;


    # --- HTTP Server (только для редиректа на HTTPS) ---
    server {
        listen 80;
        server_name localhost; # Домен, на который будет отвечать сервер.

        # Добавляем security headers даже для редиректа.
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Перенаправляем весь HTTP-трафик на HTTPS с кодом 301 (Moved Permanently).
        return 301 https://$host$request_uri;
    }


    # --- HTTPS Server (основной) ---
    server {
        # Слушаем порт 443 с поддержкой SSL и HTTP/2 для повышения производительности.
        listen 443 ssl http2;
        server_name localhost;

        # --- SSL Configuration ---
        ssl_certificate /etc/nginx/certs/self-signed.crt;  # Путь к сертификату внутри контейнера
        ssl_certificate_key /etc/nginx/certs/self-signed.key; # Путь к ключу внутри контейнера

        # Настройки SSL (примерные, можно использовать генераторы типа Mozilla SSL Config Generator).
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # --- Security Headers ---
        # `add_header ... always;` добавляет заголовки ко всем ответам, включая ошибки.
        # HSTS (HTTP Strict Transport Security): заставляет браузер всегда использовать HTTPS.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        # Запрещает отображение сайта во фреймах (защита от Clickjacking).
        add_header X-Frame-Options "DENY" always;
        # Защита от MIME-сниффинга.
        add_header X-Content-Type-Options "nosniff" always;
        # Контролирует, какую информацию о реферере отправлять.
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # --- Locations (Маршрутизация запросов) ---

        # Раздача статических файлов, собранных `collectstatic`.
        location /static/ {
            # `alias` указывает на директорию внутри контейнера, куда будет смонтирован том `static_volume`.
            alias /app/staticfiles/;
        }

        # Раздача медиа-файлов, загруженных пользователями.
        location /media/ {
            # `alias` указывает на директорию внутри контейнера, куда будет смонтирован том `media_volume`.
            alias /app/uploads/;
        }

        # Все остальные запросы проксируются на бэкенд (Django/Gunicorn).
        location / {
            # Применяем ограничение частоты запросов.
            # `burst=30`: позволяет краткосрочно превысить лимит до 30 запросов.
            # `nodelay`: не задерживать запросы, а сразу отдавать ошибку 503, если лимит превышен.
            limit_req zone=default_limit burst=30 nodelay;

            # Устанавливаем заголовки проксирования, чтобы Django "видел" реальный IP-адрес
            # и протокол пользователя, а не IP-адрес Nginx-контейнера.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Проксируем запрос на наш `upstream`.
            proxy_pass http://crm_backend;

            # Отключаем редиректы от бэкенда, чтобы Nginx сам ими управлял.
            proxy_redirect off;
        }
    }
}