"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from sys import argv
from typing import Any

import sentry_sdk
from celery.schedules import crontab
from decouple import config
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

# ======================================================================
# НАСТОЙКИ ДЛЯ DOCKER.
# ======================================================================

ALLOWED_HOSTS = [
    "127.0.0.1",
    "0.0.0.0",
]

INTERNAL_IPS = [
    "127.0.0.1",
    "0.0.0.0",
]

if DEBUG:
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS.append("10.0.2.2")
    INTERNAL_IPS.extend([ip[: ip.rfind(".")] + ".1" for ip in ips])

# ======================================================================

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # === Сторонние приложения ===
    # Безопасность.
    "axes",
    # Стилизация форм
    "crispy_bootstrap5",
    "crispy_forms",
    # Фильтрация.
    "django_filters",
    # Объектные права доступа.
    "guardian",
    # === Приложения ===
    "apps.advertisements.apps.AdvertisementsConfig",
    "apps.common.apps.CommonConfig",
    "apps.contracts.apps.ContractsConfig",
    "apps.customers.apps.CustomersConfig",
    "apps.leads.apps.LeadsConfig",
    "apps.products.apps.ProductsConfig",
    "apps.users.apps.UsersConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "axes.middleware.AxesMiddleware",
]

ROOT_URLCONF = "config.urls"


# ======================================================================
# НАСТРОЙКА ДИРЕКТОРИЙ ДЛЯ ШАБЛОНОВ.
# ======================================================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Указываем Django искать шаблоны в корневой папке templates.
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ======================================================================

WSGI_APPLICATION = "config.wsgi.application"


# ======================================================================
# НАСТРОЙКА БАЗЫ ДАННЫХ (PostgreSQL).
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# ======================================================================

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT", cast=int),  # `cast=int` преобразует строку из .env в число
    }
}

# ======================================================================

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# ======================================================================
# НАСТРОЙКИ АУТЕНТИФИКАЦИИ И АВТОРИЗАЦИИ.
# ======================================================================

# Указываем Django использовать кастомную модель пользователя.
AUTH_USER_MODEL = "users.User"

# Указываем Django, как проверять логин/пароль и как загружать права доступа.
AUTHENTICATION_BACKENDS = [
    # AxesBackend перехватывает попытки входа и управляет блокировками.
    "axes.backends.AxesBackend",
    # ModelBackend выполняет стандартную проверку логина/пароля по базе данных.
    "django.contrib.auth.backends.ModelBackend",
    # ObjectPermissionBackend от guardian добавляет проверку прав на уровне объектов.
    "guardian.backends.ObjectPermissionBackend",
]

# URL для перенаправления неавторизованных пользователей.
LOGIN_URL = "/accounts/login/"

# URL, на который пользователь будет перенаправлен после успешного входа.
LOGIN_REDIRECT_URL = "/"

# URL, на который пользователь будет перенаправлен после выхода.
LOGOUT_REDIRECT_URL = "/accounts/login/"


# ======================================================================
# НАСТРОЙКИ DJANGO-AXES (ЗАЩИТА ОТ БРУТФОРСА).
# ======================================================================

# Количество неудачных попыток до блокировки.
AXES_FAILURE_LIMIT = 5

# Период, за который считаются неудачные попытки.
# Например, 5 попыток за 10 минут.
AXES_COOLOFF_TIME = timedelta(minutes=10)

# Как блокировать: по IP-адресу, по имени пользователя или по обоим.
# ["ip_address", "username"] - самый надежный вариант.
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True

# Использовать HTTP-заголовок X-Forwarded-For, если он есть.
# Это критически важно, так как django работает за Nginx.
AXES_BEHIND_REVERSE_PROXY = True

# Имя мета-заголовка, в котором Nginx передает реальный IP.
# 'HTTP_X_FORWARDED_FOR' - стандартное значение.
AXES_REVERSE_PROXY_HEADER = "HTTP_X_FORWARDED_FOR"

# Логировать каждую попытку входа (успешную и неуспешную) в БД.
# Полезно для аудита, но может создавать много записей.
AXES_ENABLE_ACCESS_LOG = True

# Шаблон, который будет показан заблокированному пользователю.
AXES_LOCKOUT_TEMPLATE = "axes/lockout.html"


# ======================================================================
# НАСТРОЙКИ ИНТЕРНАЦИОНАЛИЗАЦИИ И ЛОКАЛИЗАЦИИ.
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# ======================================================================

LANGUAGE_CODE = "ru-RU"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Определяем форматы, в которых пользователь может вводить дату.
# Django будет пробовать их по порядку при валидации.
# `%d` - день, `%m` - месяц, `%Y` - год.
DATE_INPUT_FORMATS = [
    "%Y-%m-%d",  # '2025-10-25' (стандартный)
]


# ======================================================================
# НАСТРОЙКИ СТАТИЧЕСКИХ ФАЙЛОВ.
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# ======================================================================

# URL, по которому будут доступны статические файлы в браузере.
STATIC_URL = "static/"

# Директория, где Django будет искать статические файлы проекта.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Директория, куда `collectstatic` будет собирать все статические файлы для продакшена.
STATIC_ROOT = BASE_DIR / "staticfiles"


# ======================================================================
# НАСТРОЙКИ МЕДИА ФАЙЛОВ.
# ======================================================================
MEDIA_URL = "/media/"

MEDIA_ROOT = BASE_DIR / "uploads"


# ======================================================================
# НАСТРОЙКИ СООБЩЕНИЙ.
# ======================================================================

# Сопоставляем уровни сообщений Django с классами Bootstrap Alerts.
MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}


# ======================================================================
# НАСТРОЙКИ ЛОГИРОВАНИЯ.
# https://docs.djangoproject.com/en/5.2/topics/logging/
# ======================================================================
LOGS_DIR = BASE_DIR / "logs"

if not LOGS_DIR.exists():
    os.makedirs(LOGS_DIR)

LOGFILE_NAME = LOGS_DIR / "info.log"
LOGFILE_ERROR_NAME = LOGS_DIR / "error.log"
LOGFILE_SIZE = config("LOGFILE_SIZE", default="5", cast=int) * 1024 * 1024  # 5 Mb
LOGFILE_COUNT = config("LOGFILE_COUNT", default="5", cast=int)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # Форматеры.
    "formatters": {
        # Форматер для вывода в консоль во время разработки.
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
        # Простой форматер для продакшен-файлов.
        "simple": {
            "format": "[%(asctime)s] %(levelname)s: %(message)s",
        },
        # Специальный форматер для логов запросов Django.
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[%(server_time)s] %(message)s",
        },
    },
    # Обработчики.
    "handlers": {
        # Обработчик для вывода логов в консоль (стандартный поток ошибок).
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        # Обработчик для записи всех логов уровня INFO и выше в один файл.
        "file_info": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGFILE_NAME,
            "maxBytes": LOGFILE_SIZE,
            "backupCount": LOGFILE_COUNT,
            "formatter": "simple",
        },
        # Обработчик для записи только ошибок (ERROR и CRITICAL) в отдельный файл.
        "file_error": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGFILE_ERROR_NAME,
            "maxBytes": LOGFILE_SIZE,
            "backupCount": LOGFILE_COUNT,
            "formatter": "simple",
        },
        # Обработчик для логов сервера разработки Django.
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
    },
    # Логгеры.
    "loggers": {
        # Логгер для самого Django.
        "django": {
            "handlers": ["console", "file_info", "file_error"],
            "level": "INFO",
            "propagate": False,
        },
        # Логгер для веб-сервера Django (только в консоль).
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        # Логгер для приложений (apps).
        "apps": {
            "handlers": ["console", "file_info", "file_error"],
            "level": "DEBUG",  # В режиме DEBUG ловим все сообщения
            "propagate": False,
        },
    },
}


# ======================================================================
# НАСТРОЙКИ SENTRY.
# ======================================================================

SENTRY_DSN = config("SENTRY_DSN", default=None)

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # traces_sample_rate в 1.0, чтобы захватить 100% транзакций для мониторинга производительности.
        # В продакшене рекомендуется устанавливать меньшее значение (0.1).
        traces_sample_rate=1.0,
        # Отправлять личную информацию (например, request.user) в Sentry
        # для более удобной отладки, установите send_default_pii=True.
        send_default_pii=True,
        # Включаем сбор логов. Sentry будет перехватывать сообщения из `logging`.
        # Указываем уровень, с которого нужно перехватывать (например, INFO и выше)
        # и уровень, с которого нужно записывать "хлебные крошки" (DEBUG и выше).
        # P.S. "Хлебные крошки" (breadcrumbs) - это последовательность событий,
        # которая привела к ошибке.
        attach_stacktrace=True,
    )


# ======================================================================
# НАСТРОЙКИ КЭШИРОВАНИЯ.
# https://docs.djangoproject.com/en/5.2/topics/cache/
# ======================================================================

REDIS_HOST = config("REDIS_HOST", default="127.0.0.1")
REDIS_PORT = config("REDIS_PORT", default="6379", cast=int)

# Явно аннотируем тип переменной CACHES для mypy.
CACHES: dict[str, Any]

# Проверяем, запущен ли проект в режиме тестирования.
# `pytest` автоматически добавляет 'test' в `sys.argv`.
if "test" in argv:
    # Если это тесты, используем "фиктивный" кэш, который ничего не делает.
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
else:
    # В обычном режиме (runserver, gunicorn) используем Redis.
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        }
    }

# Время жизни кэша по умолчанию (в секундах).
CACHE_TTL = 60 * 10  # 10 минут


# ======================================================================
# НАСТРОЙКИ CELERY (АСИНХРОННЫЕ ЗАДАЧИ).
# ======================================================================

# URL брокера сообщений. Celery будет отправлять сюда задачи.
# Мы используем базу данных Redis №2, чтобы не смешивать задачи с кэшем.
CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/2"

# URL бэкенда для хранения результатов. Позволяет отслеживать статус задач.
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/2"

# Настройки для Celery Beat (планировщик периодических задач).
CELERY_BEAT_SCHEDULE = {
    # Имя задачи.
    "check-expiring-contracts-every-morning": {
        # Путь к задаче.
        "task": "apps.contracts.tasks.check_expiring_contracts",
        # Расписание: выполнять каждый день в 8:00 утра.
        "schedule": crontab(hour=8, minute=0),
    },
}


# ======================================================================
# НАСТРОЙКИ ЭЛЕКТРОННОЙ ПОЧТЫ.
# ======================================================================

if DEBUG:
    # В режиме разработки не отправляем реальные письма, а выводим их содержимое в консоль.
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # В продакшен-режиме (DEBUG=False) используем реальный SMTP.
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = config("EMAIL_HOST")
    EMAIL_PORT = config("EMAIL_PORT", cast=int)
    EMAIL_HOST_USER = config("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
    EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)

# Email отправителя по умолчанию.
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="crm-no-reply@example.com")


# ======================================================================
# НАСТРОЙКИ CLAMAV (АНТИВИРУСНАЯ ПРОВЕРКА ФАЙЛОВ).
# ======================================================================

# IP-адрес и порт, на которых слушает демон clamd.
# В Docker-окружении используем TCP-сокет, указывая имя сервиса `clamav` в качестве хоста.
CLAMD_HOST = config("CLAMAV_HOST", default="127.0.0.1")
CLAMD_PORT = 3310

# Таймаут для ожидания ответа от сканера (в секундах).
CLAMD_TIMEOUT = 5


# ======================================================================


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ======================================================================
# НАСТРОЙКИ CRISPY FORMS.
# ======================================================================

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


# ======================================================================
# НАСТРОЙКИ DJANGO-GUARDIAN.
# ======================================================================

# Устанавливаем в None, чтобы guardian не создавал специального пользователя для анонимных сессий.
ANONYMOUS_USER_NAME = None


# ======================================================================
# НАСТРОЙКИ ТЕЛЕФОННЫХ НОМЕРОВ.
# ======================================================================

# Регион по умолчанию для парсинга номеров без кода страны (ISO 3166-1 alpha-2).
# 'BY' - Беларусь, 'RU' - Россия, 'KZ' - Казахстан.
DEFAULT_PHONE_REGION = "BY"


# ======================================================================
# БИЗНЕС-КОНСТАНТЫ ПРОЕКТА.
# ======================================================================

# Максимальный размер загружаемого изображения (в МБ).
MAX_IMAGE_SIZE_MB = 2

# Максимальный размер загружаемого документа (в МБ).
MAX_DOCUMENT_SIZE_MB = 10

# Читаем количество дней из .env, преобразуя значение в целое число (int).
CONTRACT_EXPIRATION_NOTICE_DAYS = config("CONTRACT_EXPIRATION_NOTICE_DAYS", default=7, cast=int)
