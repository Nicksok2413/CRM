# ==============================================================================
# GitHub Actions Workflow для Continuous Integration (CI).
# ==============================================================================

name: Django CI

# Запускаем этот Workflow при каждом `push` в ветку `main`
# или при создании/обновлении любого Pull Request.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:18
        # Передаем переменные окружения в контейнер PostgreSQL для создания пользователя и базы данных.
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        # Опции для проверки "здоровья" контейнера.
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        # Проверка "здоровья": ждем, пока Redis не начнет отвечать на PONG.
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
            
    # Определяем "матрицу стратегий". Это позволяет легко запускать тесты
    # на нескольких версиях Python, чтобы убедиться в совместимости.
    strategy:
      fail-fast: false # Не отменять другие задачи, если одна упала
      matrix:
        python-version: ["3.12"] # Можно добавить другие, например, "3.11"

    steps:
      # ------------------------------------------------------------------------
      # Шаг 1: Клонирование репозитория.
      # ------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------------------
      # Шаг 2: Настройка PDM.
      # ------------------------------------------------------------------------
      # Используем готовый Action для установки и кэширования PDM.
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }} # Используем версию из матрицы
          cache: true

      # ------------------------------------------------------------------------
      # Шаг 3: Установка зависимостей.
      # ------------------------------------------------------------------------
      - name: Install dependencies
        run: pdm install

      # ------------------------------------------------------------------------
      # Шаг 4: Запуск проверок качества кода и тестов.
      # ------------------------------------------------------------------------

      
      - name: Run quality checks and tests
        # `env` секция для предоставления Django фиктивных данных, так как в CI/CD нет `.env` файла.
        env:
          # Предоставляем фиктивные переменные окружения, чтобы `settings.py` мог загрузиться.
          SECRET_KEY: "ci-secret-key-for-testing"
          DEBUG: "True"
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        # Вызываем кастомный скрипт `check`, который мы определили в `pyproject.toml`.
        # Он последовательно запустит ruff, mypy и pytest.
        run: pdm run check

      # ------------------------------------------------------------------------
      # (Опционально) Шаг 5: Сборка и проверка миграций.
      # ------------------------------------------------------------------------
      - name: Check for missing migrations
        # Предоставляем фиктивные переменные окружения,
        # чтобы manage.py мог успешно загрузить settings.py.
        env:
          SECRET_KEY: "ci-secret-key-for-testing"
          DEBUG: "False"
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        # Этот шаг проверяет, что все миграции сгенерированы и применены.
        # Если мы создали модель, но забыли сделать `makemigrations`, этот шаг упадет.
        run: pdm run python manage.py makemigrations --check --dry-run
